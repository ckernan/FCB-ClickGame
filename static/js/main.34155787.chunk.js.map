{"version":3,"sources":["components/Navbar/Navbar.js","components/Header/Header.js","components/Container/Container.js","components/PlayerCard/PlayerCard.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","src","width","height","alt","message","score","topScore","Header","Container","children","PlayerCard","value","id","onClick","handleClick","image","name","Footer","App","state","players","console","log","concat","playerClicked","_this","filter","player","clicked","handleIncrement","setState","resetGame","shufflePlayers","_this$state","newScore","newTopScore","i","length","j","Math","floor","random","_ref","map","Object","objectSpread","_this2","this","components_Navbar_Navbar","components_Header_Header","components_Container_Container","components_PlayerCard_PlayerCard","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34155787.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst Navbar = props => (\n    <nav className=\"navbar\">\n        <ul>\n            <li className=\"brand\"><a href=\"/\"><img src=\"assets/images/logo.ico\" width=\"30\" height=\"30\" alt=\"barcelona logo\"/>Bar&ccedil;a Click Game</a></li>\n            <li className=\"message\">{props.message}</li>\n            <li>Score: {props.score} | Top Score: {props.topScore}</li>\n        </ul>\n    </nav>\n);\n\nexport default Navbar;","import React from 'react';\nimport './style.css';\n\nconst Header = props => (\n    <header className='header container-fluid'>\n        <img className=\"logo\" src=\"assets/images/logo.ico\" alt='barcelona logo'/>\n        <img className=\"logo2\" src=\"assets/images/logo.ico\" alt='barcelona logo'/>\n        <h1>FC Barcelona Click Game</h1>\n        <h2>Click on an image to earn points, but don't click on any of them more than once!</h2>\n    </header>\n);\n\nexport default Header;","import React from 'react';\nimport \"./style.css\";\n\nconst Container = props => <div className=\"container\">{props.children}</div>;\n\nexport default Container;","import React from 'react';\nimport './style.css';\n\nconst PlayerCard = props => (\n    <div className=\"player-card\" value={props.id} onClick={() => props.handleClick(props.id)}>\n        <img src={props.image} alt={props.name}/>\n    </div>\n);\n\nexport default PlayerCard;","import React from 'react';\nimport './style.css';\n\nconst Footer = props => (\n    <footer className=\"footer\">\n        <div className=\"bottom\"><a href=\"https://github.com/ckernan/FCB-ClickGame\">GitHub Repo</a><img alt=\"react\" src=\"assets/images/react.svg\"/>\n        </div>\n    </footer>\n);\n\nexport default Footer;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport Header from './components/Header/Header';\nimport Container from './components/Container/Container';\nimport PlayerCard from './components/PlayerCard/PlayerCard';\nimport Footer from './components/Footer/Footer';\nimport players from './players.json';\nimport './App.css';\n\nclass App extends Component {\n  //setting this.state\n  state = {\n    players,\n    score: 0,\n    topScore: 0,\n    message: \"Click an image to begin!\"\n  };\n\n  handleClick = id => {\n    console.log(`${id} clicked`);\n    //Filter the this.state.players to return the player that matches the id clicked\n    const playerClicked = this.state.players.filter(player => player.id === id);\n    console.log(playerClicked);\n    //If player card has not been clicked yet, change clicked value to true. Then run handleIncrement.\n    if (playerClicked[0].clicked === false) {\n      playerClicked[0].clicked = true;\n      console.log(playerClicked);\n      //increases score by 1 pt, updates state and checks for win\n      this.handleIncrement()\n    } \n    else {\n      //updates state for loss, shuffles player cards and resets game\n      this.setState({\n        message: \"YOU LOST! Click any image to start over.\",\n        score: 0\n      })\n      this.resetGame(this.state.players);\n      this.shufflePlayers(this.state.players);\n    };\n  };\n\n  handleIncrement =() => {\n    //destructure score and top score\n    const { score, topScore } = this.state;\n    //increment score\n    const newScore = score + 1;\n    //if newScore is > topScore, reset topScore to the newScore, otherwise leave topScore as is.\n    const newTopScore = newScore > topScore ? newScore : topScore;\n    //updating state with new info\n    this.setState({\n      score: newScore,\n      topScore: newTopScore,\n      message: \"You guessed correctly...Keep clicking!\"\n    });\n    console.log(this.state.score)\n    //if newScore = 12 then player wins\n    if (newScore === 12) {\n      //update state with winning message and reset score\n      this.setState({\n        message: \"YOU WON!! Click any image to start over.\",\n        score: 0\n      });\n      this.resetGame(this.state.players)\n    };\n    //shuffle cards\n    this.shufflePlayers(this.state.players);\n  };\n\n  //Durstenfeld shuffle algorithm\n  shufflePlayers = players => {\n    for (let i = players.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [players[i], players[j]] = [players[j], players[i]];\n  }\n  }\n\n  resetGame = players => {\n    //update state; map over players array and set clicked values back to false\n    this.setState({\n      score: 0,\n      players: players.map(player => ({...player, clicked: false}))\n    });\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Navbar \n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message}\n          />\n\n        <Header />\n\n        <Container>\n          {this.state.players.map(player => (\n            <PlayerCard\n            id={player.id}\n            key={player.id}\n            name={player.name}\n            image={player.image}\n            handleClick={this.handleClick}\n            />\n          ))}\n        </Container>\n\n        <Footer />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}